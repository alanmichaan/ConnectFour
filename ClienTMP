#include "socket.h"
#include "socketserver.h"
#include "thread.h"
#include <stdlib.h>
#include <string>
#include <iostream>
#include <sstream>
#include <list>
#include <pthread.h>

using namespace std;
using namespace Communication;



class GameThread : public Thread
{

private:
    Socket *mySocket1;
 //.	Socket mySocket2;
 	//vector <ClientThread * > v;
    string message;
public:
    GameThread(Socket* const  player1)
    : Thread(true), mySocket1(player1)
    {
        ;
    }
    long ThreadMain(void){

        //while (1)
        cout<<"in main of thread"<<endl;
        ByteArray bytes;
        mySocket1->Write(ByteArray("******I am game 1*****************"));


        while (true){
            mySocket1->Write(ByteArray("******Your turn*****************"));
            cout<<"game 1 is waiting to read your message...." <<endl;
            mySocket1->Read(bytes);
            cout <<"your message is: "<< bytes.ToString() << endl;
        }
        cout << "game 1 died" << endl;

    }
};




int main(int argc, char **argv) {

    cout<< "I AM SERVER, type exit to close me" <<endl;
    SocketServer mySocketServer(2000);
    vector<GameThread *> vThreads;
    Socket mySocket1(0);
    for(;;){
     try{
/*      FlexWait waiter(2, &mySocketServer, &cinWatcher);
      Blockable * result = waiter.Wait();
      if (result == &cinWatcher){*/
      string input;
      cin >> input;
      if (input == "exit"){
        cout << "exiting this piece of shit" << endl;
        for (int i = 0; i < vThreads.size(); i++){
                       // vThreads[i]->Stop();
                       // vThreads[i] = NULL;
            delete vThreads[i];
        }
        break;
    }
    /*else{
        continue;*/
   // }
   // }
    mySocket1 = mySocketServer.Accept();


    mySocket1.Write(ByteArray("mySocket1 wrote this"));

    	//	Socket mySocket2 = mySocketServer.Accept();*/
    vThreads.push_back(new GameThread(&mySocket1));

    cout << "making game " << endl;
    

}
catch(TerminationException err){
  cout << err << endl;
}
catch(string err){
  cout << err << endl;
}
}
cout << "server is oging to bed fuck you" << endl;
sleep(1);
return 0;
}
